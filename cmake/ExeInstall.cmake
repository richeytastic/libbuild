include("$ENV{DEV_PARENT_DIR}/libbuild/cmake/LinkTargets.cmake")

# Since Windows doesn't have the concept of RPATH's for import libraries, we need to copy over
# all the required DLLs from all of the libraries used into the project's binary folder.
if(WIN32)
    set( _tdest "${${PROJECT_NAME}_BINARY_DIR}/bin")
    set( _suff "${_dsuffix}-vc${MSVC_TOOLSET_VERSION}.dll")

    if(WITH_RLIB)
        file( COPY "${rlib_BIN_DIR}/rlib${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_RIMG)
        file( COPY "${rimg_BIN_DIR}/rimg${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_RNONRIGID)
        file( COPY "${rNonRigid_BIN_DIR}/rNonRigid${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_R3D)
        file( COPY "${r3d_BIN_DIR}/r3d${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_R3DIO)
        file( COPY "${r3dio_BIN_DIR}/r3dio${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_R3DVIS)
        file( COPY "${r3dvis_BIN_DIR}/r3dvis${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_LEARNING)
        file( COPY "${rLearning_BIN_DIR}/rLearning${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_RPASCALVOC)
        file( COPY "${rPascalVOC_BIN_DIR}/rPascalVOC${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_QTOOLS)
        file( COPY "${QTools_BIN_DIR}/QTools${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_FACETOOLS)
        file( COPY "${FaceTools_BIN_DIR}/FaceTools${_suff}" DESTINATION "${_tdest}")
    endif()
    if(WITH_TESTUTILS)
        file( COPY "${TestUtils_BIN_DIR}/TestUtils${_suff}" DESTINATION "${_tdest}")
    endif()

    if(WITH_BOOST)
        # The suffix for the boost dlls
        set( _arch "-x64-")
        set( bsuff "-vc${MSVC_TOOLSET_VERSION}-mt${_arch}${Boost_LIB_VERSION}.dll")
        if(IS_DEBUG)
            set( bsuff "-vc${MSVC_TOOLSET_VERSION}-mt-gd${_arch}${Boost_LIB_VERSION}.dll")
        endif()
        file( COPY "${BOOST_LIBRARYDIR}/boost_system${bsuff}"     DESTINATION "${_tdest}") 
        file( COPY "${BOOST_LIBRARYDIR}/boost_filesystem${bsuff}" DESTINATION "${_tdest}") 
        file( COPY "${BOOST_LIBRARYDIR}/boost_thread${bsuff}"     DESTINATION "${_tdest}")
        file( COPY "${BOOST_LIBRARYDIR}/boost_regex${bsuff}"      DESTINATION "${_tdest}")
        file( COPY "${BOOST_LIBRARYDIR}/boost_date_time${bsuff}"  DESTINATION "${_tdest}")
        file( COPY "${BOOST_LIBRARYDIR}/boost_chrono${bsuff}"     DESTINATION "${_tdest}")
    endif()

    if(WITH_OPENCV)
        set( _ocv "${OpenCV_VERSION_MAJOR}${OpenCV_VERSION_MINOR}${OpenCV_VERSION_PATCH}")
        set( ocvs "${_ocv}.dll")
        if(IS_DEBUG)
            set( ocvs "${_ocv}d.dll")
        endif()
        file( COPY "${OpenCV_BIN}/opencv_world${ocvs}"              DESTINATION "${_tdest}")
        #file( COPY "${OpenCV_BIN}/opencv_surface_matching${ocvs}"   DESTINATION "${_tdest}")

        #[[
        # Copy in TBB DLL - OpenCV apparently doesn't reference it directly anywhere in its CMake
        # configuration files! Not really sure how it's managing to link it in, but it is
        # (I'm sure I've missed something obvious that will allow me to make this less version specific).
        set(TBBbin "${LIB_PRE_REQS}/tbb2017_20170604oss/bin/intel64/vc${MSVC_TOOLSET_VERSION}")
        if(IS_DEBUG)
            file( COPY "${TBBbin}/tbb_debug.dll" DESTINATION "${_tdest}")
        else()
            file( COPY "${TBBbin}/tbb.dll" DESTINATION "${_tdest}")
        endif()

	    set( _open_blas_bin "${LIB_PRE_REQS}/OpenBLAS-0.3.6-x64/bin")
        file( COPY "${_open_blas_bin}/libopenblas.dll" DESTINATION "${_tdest}")
        file( COPY "${_open_blas_bin}/libgcc_s_seh-1.dll" DESTINATION "${_tdest}")
        file( COPY "${_open_blas_bin}/libgfortran-3.dll" DESTINATION "${_tdest}")
        file( COPY "${_open_blas_bin}/libquadmath-0.dll" DESTINATION "${_tdest}")
        file( COPY "${_open_blas_bin}/libwinpthread-1.dll" DESTINATION "${_tdest}")
        #]]
    endif()

    if(WITH_VTK)
        set( vtks "-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}.dll")
        #file( COPY "${VTK_BIN}/vtkAlgLib${vtks}"                      DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonMisc${vtks}"                  DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonComputationalGeometry${vtks}" DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonColor${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonCore${vtks}"                  DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonDataModel${vtks}"             DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonExecutionModel${vtks}"        DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonMath${vtks}"                  DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonSystem${vtks}"                DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkCommonTransforms${vtks}"            DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkDicomParser${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkDoubleConversion${vtks}"            DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkExPat${vtks}"                       DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersCore${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersExtraction${vtks}"           DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersGeneral${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersGeometry${vtks}"             DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersHybrid${vtks}"               DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersModeling${vtks}"             DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersSources${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersStatistics${vtks}"           DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFiltersTexture${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkfmt${vtks}"                         DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkFreeType${vtks}"                    DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkGL2PS${vtks}"                       DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkGLEW${vtks}"                        DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkGUISupportQt${vtks}"                DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingColor${vtks}"                DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingCore${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingGeneral${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingFourier${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingHybrid${vtks}"               DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkImagingSources${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkInteractionStyle${vtks}"            DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkInteractionWidgets${vtks}"          DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOCore${vtks}"                      DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOGeometry${vtks}"                  DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOImage${vtks}"                     DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOLegacy${vtks}"                    DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOXML${vtks}"                       DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkIOXMLParser${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkJPEG${vtks}"                        DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkkissfft${vtks}"                     DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtklz4${vtks}"                         DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtklzma${vtks}"                        DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkloguru${vtks}"                      DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkMetaIO${vtks}"                      DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkParallelCore${vtks}"                DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkParallelDIY${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkPNG${vtks}"                         DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkPugiXML${vtks}"                     DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingAnnotation${vtks}"         DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingCore${vtks}"               DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingContext2D${vtks}"          DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingFreeType${vtks}"           DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingGL2PSOpenGL2${vtks}"       DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingLabel${vtks}"              DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingOpenGL2${vtks}"            DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingUI${vtks}"                 DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkRenderingVolume${vtks}"             DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkSys${vtks}"                         DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkTIFF${vtks}"                        DESTINATION "${_tdest}")
        file( COPY "${VTK_BIN}/vtkZLIB${vtks}"                        DESTINATION "${_tdest}")
    endif()

    if(WITH_CGAL)
        get_filename_component( GMP_LIBRARY_DIR "${GMP_LIBRARIES}" PATH)
        set( GMP_DLL  "${GMP_LIBRARY_DIR}/libgmp-10.dll")
        set( MPFR_DLL "${GMP_LIBRARY_DIR}/libmpfr-4.dll")
        file( COPY "${GMP_DLL}"  DESTINATION "${_tdest}")
        file( COPY "${MPFR_DLL}" DESTINATION "${_tdest}")
        set( cgsuff "-vc${MSVC_TOOLSET_VERSION}-mt-4.10.dll")
        if(IS_DEBUG)
            set( cgsuff "-vc${MSVC_TOOLSET_VERSION}-mt-gd-4.10.dll")
        endif()
        file( COPY "${CGAL_BIN}/CGAL${cgsuff}" DESTINATION "${_tdest}")
    endif()

    if(WITH_ASSIMP)
        file( COPY "${ASSIMP_DIR}/../../../bin/assimp-vc${MSVC_TOOLSET_VERSION}-mt.dll" DESTINATION "${_tdest}")
    endif()

    if(WITH_QUAZIP)
        file( COPY "${QuaZip_ROOT_DIR}/bin/QuaZip-vc${MSVC_TOOLSET_VERSION}.dll" DESTINATION "${_tdest}")
    endif()

    if(WITH_ZLIB)
        file( COPY "${ZLIB_LIBRARY}" DESTINATION "${_tdest}")
    endif()

    if(WITH_LUA)
        file( COPY "${LUA_LIBRARY}" DESTINATION "${_tdest}")
    endif()

    # Note that CPD under Windows compiles to a static library so no DLL to copy over.

    if(WITH_QT)
        set( QT_BIN "${Qt5_DIR}/../../../bin")
        file( COPY "${QT_BIN}/Qt5Core${_dsuffix}.dll"    DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5Charts${_dsuffix}.dll"  DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5GUI${_dsuffix}.dll"     DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5Widgets${_dsuffix}.dll" DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5SQL${_dsuffix}.dll"     DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5Svg${_dsuffix}.dll"     DESTINATION "${_tdest}")
        file( COPY "${QT_BIN}/Qt5Network${_dsuffix}.dll" DESTINATION "${_tdest}")
        # Ensure that the platform plugin qwindows.dll is installed into the "platforms" folder.
        file( COPY "${QT_BIN}/../plugins/platforms/qwindows${_dsuffix}.dll" DESTINATION "${_tdest}/platforms")
        # Ensure the SQLite driver is copied over
        file( COPY "${QT_BIN}/../plugins/sqldrivers/qsqlite${_dsuffix}.dll" DESTINATION "${_tdest}/sqldrivers")
        # Need imageformats and iconengines for SVG icons too.
        file( COPY "${QT_BIN}/../plugins/iconengines/qsvgicon${_dsuffix}.dll" DESTINATION "${_tdest}/iconengines")
        file( COPY "${QT_BIN}/../plugins/imageformats/qsvg${_dsuffix}.dll" DESTINATION "${_tdest}/imageformats")
        file( COPY "${QT_BIN}/../plugins/imageformats/qico${_dsuffix}.dll" DESTINATION "${_tdest}/imageformats")

        set( _openssl "$ENV{programfiles}/OpenSSL-Win64/bin")
        file( COPY "${_openssl}/libcrypto-1_1-x64.dll" DESTINATION "${_tdest}")
        file( COPY "${_openssl}/libssl-1_1-x64.dll" DESTINATION "${_tdest}")
    endif()

    # Install Windows specific gubbins
    # DLL redirection to ensure that DLLs in the application directory are loaded
    file( WRITE "${PROJECT_NAME}.exe.local" "Exists to ensure Windows loads DLLs from this directory.")
    file( COPY "${PROJECT_NAME}.exe.local" DESTINATION "${_tdest}")

    # Copy in the MSVC runtime dlls
    if(DEFINED ENV{VCToolsRedistDir})
        set( MSVC_REDIST "$ENV{VCToolsRedistDir}")
    else()
        set( MSVC_REDIST "$ENV{VCInstallDir}/redist")
    endif()

    if( IS_DEBUG)
        set( C_DLL_DIR "${MSVC_REDIST}/Debug_NonRedist/$ENV{PLATFORM}/Microsoft.VC${MSVC_TOOLSET_VERSION}.DebugCRT")
    else()
        set( C_DLL_DIR "${MSVC_REDIST}/$ENV{PLATFORM}/Microsoft.VC${MSVC_TOOLSET_VERSION}.CRT")
    endif()

    file( GLOB MSVC_REDIST "${C_DLL_DIR}/*${_dsuffix}.dll")
    file( COPY ${MSVC_REDIST} DESTINATION "${_tdest}" FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_WRITE GROUP_READ WORLD_READ)
    file( GLOB UCRT_DLLS "$ENV{WindowsSDKDir}/Redist/$ENV{ucrtversion}/ucrt/DLLs/$ENV{PLATFORM}/*.dll")
    file( COPY ${UCRT_DLLS} DESTINATION "${_tdest}" FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_WRITE GROUP_READ WORLD_READ)
endif()
